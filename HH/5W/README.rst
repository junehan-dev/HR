1. 템플릿 엔진을 사용하여 데이터를 가져와서 보여주는 방법이 여러가지가 있을 것입니다. 우리강의에서는 어떻게 했나요? 다른 방법은 어떤게 있을까요? 장단점은 무엇 인가요?

   템플릿 렌더링 없이 소스를 제공하는 방식이 있고, 별도 템플릿 엔진으로 코드를 html로 전환하는 방식이 있습니다.

   - 서버에서 static resource를 제공하는 경우
      (렌더링을 어디에 주도하는지에 따라 client side렌더링, server side렌더링으로 갈립니다)

      - template rendering이 없을 경우(강의에서 사용한 방식)
         client side 렌더링의 비중이 높을 것으로 예측됩니다.

         - 장점

            - 자원을 그대로 전달한다면, response를 구성하는 프로세스가 줄어든 만큼 request에 대해 응답하는 속도가 빠른게 장점입니다.

         - 단점

            - 장점에서 덜어진만큼 추가적인 프로세스가 이후에 동작을 필요로 하게 되는 경우가 있을 수 있으며,
            - 혹은 애초에 html파일 자체가 무거울 가능성도 높습니다.

      - template rendering 있을 경우
         server side 렌더링의 비중이 높을 것으로 예측됩니다.

         - 장점

            - request를 충분히 해석한 뒤에 html을 구성하기 때문에, 추가적인 정보에 따른 선택적인 html rendering이 가능합니다.

         - 단점

            - request마다 파일 IO를 기본으로 text processing이 추가로 발생되는 것은 물론이고 메모리 사용량이 증가합니다. 그에 따라 응답시간이 지연됩니다.

   - 다른 방법

      - 별도의 static resource를 제공하는 서버를 구성하고, 해당 서버로 html, js, css, 즉 프론트엔드를 분리합니다.
         - 이를 통해 초기 경험에 대한 부하를 프론트서버에 부담시키고, 이후에 추가적인 경험은 backend서버와 통신하도록 처리하여 효율성을 늘릴 수 있습니다.
         - 효율성이 늘어난 것으로 보일 수 있지만, 어차피 backend, frontend에서 감당해야하는 자원의 총량은 비슷합니다. 다만 분산과 예측을 통해서 사용자를 감당하는 방식을 잘 고르는 것을 통해 우리는 해당 서비스에 대응하는 더 나은 경험을 제공할 수 있습니다.


