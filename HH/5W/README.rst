1. 템플릿 엔진을 사용하여 데이터를 가져와서 보여주는 방법이 여러가지가 있을 것입니다. 우리강의에서는 어떻게 했나요? 다른 방법은 어떤게 있을까요? 장단점은 무엇 인가요?

   템플릿 렌더링 없이 소스를 제공하는 방식이 있고, 별도 템플릿 엔진으로 코드를 html로 전환하는 방식이 있습니다.

   - 서버에서 static resource를 제공하는 경우

      - template rendering이 없을 경우
      (강의에서 사용한 방식/``express.static()``\)

         설명
            요청 정보에 따라 데이터를 HTML에 바인딩(붙이는)동작이 없기 때문에, 추후에 API요청을 게으르게 수행하면서 더불어 dom을 조작하는 client side 렌더링의 비중이 높을 것으로 예측됩니다.

         장점
            자원을 그대로 전달한다면, response를 구성하는 프로세스가 줄어든 만큼 request에 대해 응답하는 속도가 빠른게 장점입니다.

         단점
            1. 장점에서 덜어진만큼 추가적인 프로세스가 이후에 동작을 필요로 하게 되는 경우가 있을 수 있으며,
            2. 혹은 애초에 html파일 자체가 무거울 가능성도 높습니다.

      - template rendering 있을 경우(템플릿 렌더링 라이브러리, ejs, pug(구 jade))

         설명
            html파일을 토대로 동적으로 request에 따라 데이터를 html에 포함하여 문자열을 수정하는 작업이 들어갑니다.
            이 경우는 server side 렌더링의 비중이 높을 것으로 예측되며, 해당 웹어플리케이션이 유저 개념이 없지만 데이터는 많이 있을 경우 선택하기 좋은 옵션입니다.

         장점
            request를 충분히 해석한 뒤에 html을 구성하기 때문에, 추가적인 정보에 따른 선택적인 html rendering이 가능합니다. 초기에 가장 많은 경험을 전달할 수 있다는 장점이 있습니다.

         단점
            request마다text processing이 추가로 발생되는 것으로 메모리 사용량이 증가하고, 그것에 다른 네트워크 통신을 동반한다면, 그에 따라 응답시간이 지연됩니다.

   다른방법?
      aws-s3(simple storage service 간단한 저장소 서비스)를 사용하는 방법을 생각해 보았습니다.

      설명
         별도의 정적자원을 제공하는 서버를 구성하고, nodejs서비스에서 html, js, css, 즉 프론트엔드를 분리하여 배치합니다.

      장점
         1. 페이지 전환에 대한 모든 부담을 프론트서버(정적 자원)에 이전할 수 있습니다.
         2.추가적인 경험은 nodejs서비스와 통신하도록 처리하여 정적인 자원에 대한 부담을 완전히 차단하여 효율성을 늘릴 수 있습니다.

      단점
         1. 아무래도 분산이 일어난 만큼 서비스 구성이 복잡도가 올라가고, 한쪽 서버가 마비되면 둘 다 의미가 없어진다는 점이 있어 운영비용이 증가합니다.
         2. 요즘 유행을 따라 단일-페이지-어플리케이션(SPA)을 구성해서 처리할 경우 백엔드 서비스에 요청이 작은단위로 주기적으로 발생할 수 있다는 단점이 있습니다.

   결론
      효율성이 늘어난 것으로 보일 수 있지만, 어차피 backend, frontend에서 감당해야하는 자원의 총량은 비슷합니다.
      다만 분산과 예측을 통해서 사용자를 감당하는 방식을 잘 고르는 것을 통해 우리는 해당 서비스에 대응하는 더 나은 경험을 제공할 수 있습니다.



2. 회원가입한 유저가 게시판에 글을 쓰는 서비스입니다. 게시글과 유저모델은 어떤 모양새 이면 좋을 까요? 게시판 글 리스트를 불러오는 API에서는 몽구스 데이터를 어떻게 가져오면 좋을 까요?

   - 위의 시나리오에 대응하는 필수 field는 아래로 정의합니다.

      - User
         - ``Primary Key/ObjectID/_id``
            유저의 고유한 식별자를 나타냅니다.

      - Post
         - ``Primary Key/ObjectID/_id``
            게시글의 고유한 식별자를 나타냅니다.
         - ``Foreign Key/ObjectID/user_id``
            유저의 고유한 식별자를 나타냅니다.
            게시글을 작성한 유저를 나타내며, 한명의 유저가 여러 게시글을 작성할 수 있을 경우에 유효합니다.
         - ``Date/created``
            게시글 데이터의 생성일자를 나타냅니다.
            데이터를 가져오는 방식으로 가장 많이 선호되는 방식입니다.
         - ``Date/updated``
            게시글 데이터의 수정일자를 나타냅니다.
            데이터에 대한 정렬방식으로 선택가능한 방식입니다.
         - ``positive integer/priority``
            게시글 데이터에대한 인기도를 나타냅니다.
            데이터에 대한 정렬방식으로 선택가능한 방식입니다.

   - mongoose에서 데이터를 가져오는방식은 아래와 같이 3가지를 추천합니다.

      - 최근 등록 기준20개:
         ``Post.find().sort({"created": "desc"}).limit(20);``

      - 우선순위 기준 20개:
         ``Post.find().sort({"priority": "desc"}).limit(20);``

      - 작성자 기준 40개:
         ``Post.find({"user_id": ObjectId("USER_PK")}).sort({"priority": "desc"}).limit(20);``

